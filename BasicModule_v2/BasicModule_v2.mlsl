struct {
    ModelElement: entity {
        isAbstract: bool;
    }

    Node: ModelElement {
        fields: Field[];
    }

    Field: slot {
        value: slot.value;
        type: slot.type;
     }

    Edge: ModelElement {
		source: Node;
		target: Node;

		sourceMin: int;
		sourceMax: int;
		targetMin: int;
		targetMax: int;

        roleName: string;
		roleNameSource: string;
		roleNameTarget: string;
	}

    Inheritance: ModelElement {
        source: ModelElement;
        target: ModelElement;
    }

	Inheritance_Node: Inheritance {
	    source: Node;
        target: Node;
	}

	Inheritance_Edge: Inheritance {
	    source: Edge;
        target: Edge;
	}
}

annotations {
    mutable level in {0..*} on ModelElement, Field;
}

rules {
    #B0: !ModelElement.meta.isAbstract;

    #B1: Edge.sourceMax >= Edge.sourceMin;
    #B2: Edge.targetMax >= Edge.targetMin;

    // removed B3-B6 (compared to BasicModule)
    // #B3: Inheritance.sourceMin = 1;
    // #B4: Inheritance.sourceMax = 1;
    // #B5: Inheritance.targetMin = 1;
    // #B6: Inheritance.targetMax = 1;

    #B7: forall inh as Inheritance_Node:
      forall f2 as Field:
       exists f1 as Field:
        f2.name = f1.name and f2.type = f1.type and
        f2.value = f1.value
    where f1 in inh.source.fields and f2.potency > 0 and
    f2 in inh.target.fields;

    #B8: Edge.source.level = Edge.target.level and
        Edge.source.level = Edge.level;

    #B9: Edge.source.meta in closure(Edge.meta.source) {
        Inheritance_Node.source where Inheritance_Node.target = Edge.meta.source;
    };

    #B10: Edge.target.meta in closure(Edge.meta.target) {
        Inheritance_Node.source where Inheritance_Node.target = Edge.meta.target;
    };

    #B11: forall node as Node:
      forall edge as Edge:
       sum(edge2.sourceMin) >= edge.meta.sourceMin and
       sum(edge2.sourceMax) <= edge.meta.sourceMax
      where edge.meta=edge2.meta and edge2.source=node
    where edge.source=node;

    #B12: forall node as Node:
      forall edge as Edge:
       sum(edge2.targetMin) >= edge.meta.targetMin and
       sum(edge2.targetMax) <= edge.meta.targetMax
      where edge.meta=edge2.meta and edge2.target=node
    where edge.target=node;

    #B13: forall i1 as Inheritance:
        ! exists i2 as Inheritance:
            i1 != i2 and i1.source = i2.source;

    #B14: Inheritance.source != Inheritance.target;

    #B15: ! exists inh as Inheritance: inh.source in closure(inh.target) {
        Inheritance.target where Inheritance.source = inh.target;
    };
}