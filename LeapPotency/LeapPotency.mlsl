annotations {
    override mutable potency? in {0..*} on ModelElement, Field;
	mutable leapPotency? in {2..*} on ModelElement;
}

rules {
    omit I1, I2, I3, F2, F3;

    #LP1: (potency = null and leapPotency != null) or
        (potency != null and leapPotency = null);

    #LP2: leapPotency <= level;
    #LP3: Inheritance.leapPotency = null;

    // Replaces I1-3
    #N_classic: if (Node.meta.potency != null) {
        Node.meta.potency != 0;
        Node.level = Node.meta.level - 1;
        Node.potency = Node.meta.potency - 1;

        // Replaces F2-3
        Field.level = Field.meta.level - 1
            where Field in Node.fields;
        Field.potency = Field.meta.potency - 1
            where Field in Node.fields;
    }

    // Replaces I1-3
    #E_classic: if (Edge.meta.potency != null) {
            Edge.meta.potency != 0;
            Edge.level = Edge.meta.level - 1;
            Edge.potency = Edge.meta.potency - 1;
    }

    // New leap semantics
    #N_leap: if (Node.meta.leapPotency != null) {
        Node.level = Node.meta.level - Node.meta.leapPotency;
        Node.potency = 0;

        Field.level = Field.meta.level - Node.meta.leapPotency
            where Field in Node.fields;
        Field.potency = Field.meta.potency - 1
			where Field in Node.fields;
    }

    #E_leap: if (Edge.meta.leapPotency != null) {
        Edge.level = Edge.meta.level - Edge.meta.leapPotency;
        Edge.potency = 0;
    }
}